{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import express from \"express\";\nimport cors from \"cors\";\nimport { PrismaClient, User } from \"@prisma/client\";\nimport jwt from \"jsonwebtoken\";\nimport cookieParser from \"cookie-parser\";\nimport bcrypt from \"bcryptjs\";\nimport { AuthenticatedRequest } from \"./types/Request.js\";\n\nexport const app = express();\nconst prisma = new PrismaClient();\n\nconst whitelist = [\"http://localhost:5173\", \"https://melody-five.vercel.app\"];\n\nconst corsOptions = {\n\tcredentials: true,\n\torigin: (origin, callback) => {\n\t\tif (whitelist.indexOf(origin) !== -1 || !origin) {\n\t\t\tcallback(null, true);\n\t\t} else {\n\t\t\tcallback(new Error(\"Not allowed by CORS\"));\n\t\t}\n\t},\n};\n\napp.use(cors(corsOptions));\napp.use(express.json());\napp.use(cookieParser());\napp.use(express.urlencoded({ extended: false }));\n\napp.get(\"/api\", (req, res) => {\n\tres.send(\"Hello World\");\n});\n\n// ! SIGNUP ROUTE\n\napp.post(\"/api/signup\", async (req, res) => {\n\tconst { email, password, name } = req.body as User;\n\tconst hashedPassword = await bcrypt.hash(password, 10);\n\tconst exists = await prisma.user.findUnique({ where: { email } });\n\n\tif (exists) {\n\t\treturn res.status(400).json({ message: \"User already exists\" });\n\t}\n\n\tawait prisma.user\n\t\t.create({ data: { email, password: hashedPassword, name } })\n\t\t.then((user) => {\n\t\t\tconst access_token = jwt.sign({ email }, process.env.JWT_ACCESS_SECRET, { expiresIn: 60 });\n\t\t\tconst refresh_token = jwt.sign({ email }, process.env.JWT_REFRESH_SECRET, { expiresIn: \"7d\" });\n\n\t\t\tres.cookie(\"jwt\", refresh_token, {\n\t\t\t\thttpOnly: true,\n\t\t\t\tsameSite: \"none\",\n\t\t\t\tsecure: true,\n\t\t\t\tmaxAge: 24 * 60 * 60 * 1000,\n\t\t\t});\n\t\t\treturn res.status(200).json({ message: \"Sign Up Successful\", ...user, access_token });\n\t\t})\n\t\t.catch((e) => {\n\t\t\treturn res.status(403).json({ message: e.message });\n\t\t});\n});\n\n// ! LOGIN ROUTE\n\napp.post(\"/api/login\", async (req, res) => {\n\tconst { email, password } = req.body as User;\n\tconst user = await prisma.user.findUnique({ where: { email } });\n\n\t// console.log(await bcrypt.compare(password, user.password));\n\t// console.log(await bcrypt.hash(password, 10));\n\tconst validPassword = await bcrypt.compare(password, user.password);\n\n\tif (!user || !validPassword) {\n\t\treturn res.status(403).json({ message: \"Invalid Password or Email\" });\n\t}\n\n\tconst access_token = jwt.sign({ email }, process.env.JWT_ACCESS_SECRET, { expiresIn: 60 });\n\tconst refresh_token = jwt.sign({ email }, process.env.JWT_REFRESH_SECRET, { expiresIn: \"7d\" });\n\n\tres.cookie(\"jwt\", refresh_token, {\n\t\thttpOnly: true,\n\t\tsameSite: \"none\",\n\t\tsecure: true,\n\t\tmaxAge: 24 * 60 * 60 * 1000,\n\t});\n\n\treturn res.status(200).json({ message: \"Login Successful\", access_token });\n});\n\n// ! REFRESH TOKEN ROUTE\n\napp.get(\"/api/refresh\", async (req, res) => {\n\tconst token = req.cookies.jwt;\n\n\tif (!token) {\n\t\treturn res.status(406).json({ message: \"Unauthorized\" });\n\t}\n\n\tjwt.verify(token, process.env.JWT_REFRESH_SECRET, (err: unknown, user: { email: string }) => {\n\t\tif (err) {\n\t\t\treturn res.status(403).json({ message: \"Invalid token\" });\n\t\t}\n\n\t\tconst access_token = jwt.sign({ email: user.email }, process.env.JWT_ACCESS_SECRET, { expiresIn: 60 });\n\n\t\treturn res.status(200).json({ access_token });\n\t});\n});\n\n// ! VERIFY FUNCTION\n\nconst verify = async (req: any, res: any, next: any) => {\n\tconst token = req.headers.authorization?.split(\" \")[1];\n\n\tif (!token || token == \"undefined\") {\n\t\treturn res.status(406).json({ message: \"Unauthorized\" });\n\t}\n\n\tjwt.verify(token, process.env.JWT_ACCESS_SECRET, async (err: unknown, user: User) => {\n\t\tif (err) {\n\t\t\tif (err instanceof jwt.TokenExpiredError) {\n\t\t\t\treturn res.status(406).json({ message: \"Session Expired\" });\n\t\t\t}\n\t\t\treturn res.status(403).json({ message: \"Invalid token\" });\n\t\t}\n\t\t// fetch user from db\n\t\tconst fetchedUser = await prisma.user.findUnique({ where: { email: user.email } });\n\t\treq.user = { ...user, ...fetchedUser };\n\t\tnext();\n\t});\n};\n\n// ! DEFINING PROTECTED ROUTES\n\napp.get(\"/api/posts\", verify, async (req: AuthenticatedRequest, res) => {\n\tconst posts = await prisma.post.findMany({ where: { author: { email: req.user.email } } });\n\treturn res.status(200).json({ message: \"Authorized from Posts Route\", user: req.user, posts });\n});\n\napp.post(\"/api/posts\", verify, async (req: AuthenticatedRequest, res) => {\n\tconst post = await prisma.post.create({\n\t\tdata: {\n\t\t\ttitle: req.body.title,\n\t\t\tcontent: req.body.content,\n\t\t\tauthor: {\n\t\t\t\tconnect: { email: req.user.email },\n\t\t\t},\n\t\t},\n\t});\n\treturn res.status(200).json({ message: \"Post Created\", post });\n});\n\napp.get(\"/api/logout\", verify, async (req: AuthenticatedRequest, res) => {\n\tres.clearCookie(\"jwt\");\n\treturn res.status(200).json({ message: \"Logged Out\" });\n});\n\napp.listen(process.env.PORT, () => {\n\tconsole.log(`Server is running: http://localhost:${process.env.PORT}`);\n});\n"],"mappings":"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","names":[]}